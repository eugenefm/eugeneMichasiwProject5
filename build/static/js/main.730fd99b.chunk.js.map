{"version":3,"sources":["logo.svg","StockInfo.js","StockChart.js","SearchBarAuto.js","Article.js","NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StockInfo","props","react_default","a","createElement","className","srcSet","profile","image","alt","companyName","ticker","price","change","index_es","icon","faChevronDown","faChevronUp","description","range","beta","mktCap","exchange","sector","industry","StockChart","_this","this","data","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderWidth","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","xAxes","type","time","unit","gridLines","color","zeroLineColor","ticks","fontColor","yAxes","legend","display","onClick","handlerFromParent","max","es","Component","SearchBarAuto","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getTickers","axios","get","dataResponse","then","response","validTickers","map","Ticker","setState","tickers","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","state","filter","stock","test","getSuggestionValue","suggestion","concat","renderSuggestion","_ref","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","part","index","highlight","key","text","onChange","event","_ref2","newValue","method","toUpperCase","onSuggestionsFetchRequested","_ref3","suggestions","onSuggestionsClearRequested","onSuggestionSelected","_ref4","suggestionValue","suggestionIndex","sectionIndex","preventDefault","substr","indexOf","onSubmit","e","includes","_this2","_this$state","inputProps","placeholder","id","htmlFor","dist_default","slice","focusInputOnSuggestionClick","Article","loadImages","urlToImage","newUrlToImage","src","title","href","url","target","rel","source","date","NewsFeed","error","newsFeed","length","article","Article_Article","moment","publishedAt","format","name","App","handleData","getProfile","getPriceAndSeries","Math","round","getNews","getMarketStatus","isTheStockMarketOpen","marketStatus","promise1","params","datatype","promise2","Promise","all","response1","toFixed","response2","historical","timeData","timeLabel","forEach","item","push","close","calculateData","setChartLength","timeSeries","apiKey","sources","language","pageSize","sortBy","q","encodeURI","articles","news","label","newLabel","newData","chartUnit","selectedTimeData","selectedTimeLabel","selectedTimeUnit","maxTimeLength","handleTimeSelection","timeSelection","series","console","log","lastIndex","yesterday","yearData","yearMax","apply","toConsumableArray","yearMin","min","calcData","require","SearchBarAuto_SearchBarAuto","StockChart_StockChart","NewsFeed_NewsFeed","faHeart","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.730fd99b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.78679e07.svg\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\nexport default function StockInfo(props) {\n\n  // change the class of the 'Change' dispay if it's positive or negatice\n  const change = () => {\n    if (props.change < 0) {\n      return <span className=\"change negative\">{props.change} <FontAwesomeIcon icon={ faChevronDown }/></span>;\n    } else if (props.change > 0) {\n      return <span className=\"change positive\">{props.change} <FontAwesomeIcon icon={ faChevronUp }/></span>;\n    } else {\n      return <span className=\"change\">{props.change}</span>;\n    }\n  }\n\n  // render the stock info\n  return (\n    <div className=\"stockInfo\">\n      <div className=\"mainInfo\">\n        <div className=\"imageBox\">\n          <img srcSet={props.profile.image} alt={props.companyName} />  \n        </div>\n        <div>\n          <h2>{props.companyName} <span>({props.ticker})</span></h2>\n          <p><span className=\"price\"><span className=\"current\">{props.price}</span>{change()}</span></p>\n        </div>\n      </div>\n      <div className=\"descriptionAndList\">\n        <p className=\"stockDescription\">{props.profile.description}</p>\n        <ul className=\"infoList\">\n          <li>\n            <span>52 Week Range</span>\n            <span>{props.range}</span>\n          </li>\n          <li>\n            <span>Beta</span>\n            <span>{props.profile.beta}</span>\n          </li>\n          <li>\n            <span>Market Cap</span>\n            <span>{props.mktCap}</span>\n          </li>\n          <li>\n            <span>Exchange</span>\n            <span>{props.profile.exchange}</span>\n          </li>\n          <li>\n            <span>Sector</span>\n            <span>{props.profile.sector}</span>\n          </li>\n          <li>\n            <span>Industry</span>\n            <span>{props.profile.industry}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport {Line} from 'react-chartjs-2';\n\nexport default class StockChart extends Component {\n  \n  render() {\n    // chart.js data options\n    const data = {\n      labels: this.props.labels,\n      datasets: [\n        {\n          labels: 'My First dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: '#fff',\n          borderColor: '#fff',\n          borderCapStyle: 'butt',\n          borderWidth: 1,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: '#fff',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 0,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: '#fff',\n          pointHoverBorderWidth: 2,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          data: this.props.data\n          \n        }\n      ]\n    };\n    // chart.js canvas options\n    const options = {\n      scales: {\n          xAxes: [{\n              type: 'time',\n              time: {\n                  unit: this.props.unit\n              },\n              gridLines: {\n                color: \"rgba(255, 255, 255, 0.2)\",\n                zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n              },\n              ticks: {\n                fontColor: \"rgba(255, 255, 255, 0.8)\",\n              }\n          }],\n          yAxes: [{\n            gridLines: {\n              color: \"rgba(255, 255, 255, 0.2)\",\n              zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n            },\n            ticks: {\n              fontColor: \"rgba(255, 255, 255, 0.8)\",\n            }\n          }]\n      },\n      legend: {\n        display: false\n      }\n      // responsive: true\n    }\n    \n    return (\n      <div className=\"stockChart\">\n        <h3>Historical Performance</h3>\n        <p>Scale: <button onClick={() => {this.props.handlerFromParent(22)}} className={this.props.unit === 'day' ? 'active' : null}>Month</button>\n        <button onClick={() => {this.props.handlerFromParent(253)}} className={this.props.unit === 'month' ? 'active' : null}>Year</button>\n        <button onClick={() => {this.props.handlerFromParent(this.props.max)}} className={this.props.unit === 'year' ? 'active' : null}>Five Year</button></p>\n        <Line data={data} options={options} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\n\nexport default class SearchBarAuto extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      tickers: [],\n      validTickers: []\n    };    \n  }\n\n  getTickers = () => {\n    const url = 'https://financialmodelingprep.com/api/stock/list/all?datatype=json';\n    //make the api call to get every available ticker sumbol\n    axios.get( url, {\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data\n      let validTickers = response.map((ticker) => {\n        return ticker.Ticker;\n      });\n      // save full response and array of valid tickers to the component's state\n      this.setState({\n        tickers: response,\n        validTickers: validTickers\n      })\n    })\n  }\n\n  componentDidMount(){\n    // make api call on load\n    this.getTickers();\n  }\n\n  // react autosuggest code begins, code adapted from their custom render demo: https://codepen.io/moroshko/pen/PZWbzK\n\n  // escape special characters \n  escapeRegexCharacters = (str) => {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  // get suggestions\n  getSuggestions = (value) => {\n    const escapedValue = this.escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('\\\\b' + escapedValue, 'i');\n    \n    return this.state.tickers.filter(stock => regex.test(this.getSuggestionValue(stock)));\n  }\n  \n  // get suggestion value\n  getSuggestionValue = (suggestion) => {\n    return `${suggestion.Ticker} ${suggestion.companyName}`;\n  }\n  \n  // render the list of of suggestions\n  renderSuggestion = (suggestion, { query }) => {\n    const suggestionText = `${suggestion.Ticker} | ${suggestion.companyName}`;\n    const matches = AutosuggestHighlightMatch(suggestionText, query);\n    const parts = AutosuggestHighlightParse(suggestionText, matches);\n  \n    // render the list and apply the class of highlight to the parts that match the input\n    return (\n      <span className={'suggestion-content '}>\n        <span className=\"suggestion\">\n          {\n            parts.map((part, index) => {\n              const className = part.highlight ? 'highlight' : null;\n  \n              return (\n                <span className={className} key={index}>{part.text}</span>\n              );\n            })\n          }\n        </span>\n      </span>\n    );\n  }\n\n  // have react handle the inout change\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue.toUpperCase()\n    });\n  };\n  \n  // store the suggestions to state\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // clear the state\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  // when a suggestion is slected pass the ticker to an event handler from the parent\n  onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) =>{\n    event.preventDefault();\n    const ticker = suggestionValue.substr(0,suggestionValue.indexOf(' '));\n    this.setState({\n      value: ticker,\n    })\n    this.props.handlerFromParent(ticker);\n  };\n\n  // if the user submits a valid input instead of picking a suggestion from the list, pass the ticker to an event handler from the parent\n  onSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.validTickers.includes(this.state.value)) {\n      this.props.handlerFromParent(this.state.value);\n    }\n    \n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // input props set the parameters on the input\n    const inputProps = {\n      placeholder: \"Ticker: GOOG\",\n      value,\n      onChange: this.onChange,\n      id: \"stockSearch\"\n    };\n\n    return (\n      <form onSubmit={(e) => this.onSubmit(e)}>\n        <label htmlFor='stockSearch' className=\"visuallyHidden\">Input stock sticker.</label>\n        <Autosuggest \n          suggestions={suggestions.slice(0, 5)}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          onSuggestionSelected={this.onSuggestionSelected}\n          inputProps={inputProps}\n          focusInputOnSuggestionClick={false} />\n      </form>\n    );\n  }\n}\n\n","import React, { Component } from 'react'\n\nexport default class Article extends Component {\n  // loads an image if its available\n  loadImages = () => {\n    if (this.props.urlToImage) {\n\n      // if the image is an http, rewrite the url as https to prevent mixed content errors.\n      let urlToImage = this.props.urlToImage;\n      let newUrlToImage = urlToImage;\n      if (urlToImage.includes('http:')) {\n      newUrlToImage = newUrlToImage.slice(0, 4) + \"s\" + newUrlToImage.slice(4);\n      }\n      return (\n        <div className=\"previewImage\">\n          <img src={newUrlToImage} alt={this.props.title} />\n        </div>\n      );\n    }}\n  render() {\n    return (\n      <div className=\"article\">\n        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          {this.loadImages()}\n        </a>\n        <p className=\"articleSource\">{this.props.source} <span className=\"articleDate\">{this.props.date}</span> </p>\n        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          <h3>{this.props.title}</h3>\n        </a> \n        <p>{this.props.description}</p>\n        <a className=\"readMore\" href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">Read More</a> \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Article from './Article'\nimport moment from 'moment'\n\nexport default class NewsFeed extends Component {\n  render() {\n    // show a message if no articles are available\n    let error = '';\n    if (!this.props.newsFeed.length) {\n      error = <p>No articles available at this time.</p>\n    }\n    return (\n      <div className=\"newsFeed\">\n        <h2>Relevant News</h2>\n        {/* map through an array of articles to display them on the newsfeed */}\n        {this.props.newsFeed.map((article, index) =>{\n          return (\n            <Article \n              key={index}\n              title={article.title}\n              url={article.url}\n              urlToImage={article.urlToImage}\n              date={moment(article.publishedAt).format(\"| MMM D, YYYY\")}\n              source={article.source.name}\n              description={article.description} />\n              \n        )})}\n        {error}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss';\nimport axios from 'axios';\nimport StockInfo from './StockInfo';\nimport StockChart from './StockChart';\nimport SearchBarAuto from './SearchBarAuto';\nimport NewsFeed from './NewsFeed';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment';\n\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state={\n      ticker: 'GOOG',\n      profile: [],\n      price: 0,\n      timeSeries: [],\n      timeData: [],\n      timeLabel: [],\n      selectedTimeData: [],\n      selectedTimeLabel: [],\n      selectedTimeUnit: '',\n      maxTimeLength: 0,\n      companyName: '',\n      mktCap: '',\n      news: [],\n      calcData: {},\n      marketStatus: true\n    }\n  }\n  handleData = (data) => {\n    // handle data from the search bar, save the ticker to state and call the apis\n    this.setState({\n    ticker: data\n    })\n    this.getProfile(data);\n    this.getPriceAndSeries(data);\n  }\n  getProfile = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/v3/company/profile/';\n    //make the api call\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.profile\n      \n      // clean up company names \n      let companyName = response.companyName\n      if(companyName.includes(' Inc')){\n        companyName = companyName.substr(0,companyName.indexOf(' Inc'));\n      } else if(companyName.includes(' Ltd')){\n        companyName = companyName.substr(0,companyName.indexOf(' Ltd'));\n      } else if(companyName.includes(' (The)')){\n        companyName = companyName.substr(0,companyName.indexOf(' (The)'));\n      }\n\n      // remove zeros from billion dollar market caps and append a B\n      let mktCap = response.mktCap \n      if (mktCap >= 1000000000) {\n        mktCap = (Math.round((mktCap / 1000000000) * 100) / 100) + ' B'\n      }\n      \n      this.getNews(companyName);\n      // save profile to state\n      this.setState({\n        profile: response,\n        companyName: companyName,\n        mktCap: mktCap\n      })\n    })\n  }\n  getMarketStatus = () => {\n    const url = 'https://financialmodelingprep.com/api/v3/is-the-market-open';\n    //make the api call to get market status\n    axios.get( url, {\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.isTheStockMarketOpen\n      // save full response and array of valid tickers to the component's state\n      this.setState({\n        marketStatus: response\n      })\n    })\n  }\n\n  getPriceAndSeries = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/company/real-time-price/';\n    const url2 = 'https://financialmodelingprep.com/api/v3/historical-price-full/';\n\n    // make the api call to get the price\n    const promise1 = axios.get(url + ticker, {\n      dataResponse: 'json',\n      params: {\n        datatype: 'json'\n      }\n    })\n\n    // make the api call to get the series\n    const promise2 = axios.get(url2 + ticker, {\n      dataResponse: 'json'\n    })\n\n    Promise.all([promise1, promise2]).then(response =>{\n      // make the api call to get the timeseries\n      let response1 = response[0].data.price.toFixed(2)\n      let response2 = response[1].data.historical\n      let timeData = [];\n      let timeLabel = [];\n      response2.forEach((item) => {\n        timeData.push(item.close)\n        timeLabel.push(item.date)\n      })\n\n      // profile data is inacurate so calculate additional data with the time series and price\n      this.calculateData(timeData, response2, response1)\n\n      // set default chart length to the length of the series\n      this.setChartLength(timeLabel, timeData, timeLabel.length)\n\n      \n      // save the price and series to state\n      this.setState({\n        price: response1,\n        timeSeries: response,\n        timeLabel: timeLabel,\n        timeData: timeData\n      })\n    })\n  }\n  getNews = (name) => {\n    const url = 'https://newsapi.org/v2/everything';\n    // get business news from the api \n    axios.get(url, {\n      dataResponse: 'json',\n      params: {\n        apiKey: '6b5dae4615c944b1aabc8497566543fa',\n        sources: '\"financial-post,cnbc,the-wall-street-journal,fortune,business-insider\"',\n        language: 'en',\n        pageSize: 12,\n        sortBy: 'publishedAt',\n        q: encodeURI(name)\n      }\n    }).then(response =>{\n      response = response.data.articles\n      // save the news articles in an array to state\n      this.setState({\n        news: response\n      })\n    })\n  }\n\n  setChartLength = (label, data, time) => {\n    const newLabel = label.slice((label.length - time));\n    const newData = data.slice((data.length - time));\n    let chartUnit = 'year';\n    if (time === 22) {\n      chartUnit = 'day'\n    } else if (time === 253) {\n      chartUnit = 'month'\n    }\n    // save the selected chart length to state\n    this.setState({\n      selectedTimeData: newData,\n      selectedTimeLabel: newLabel,\n      selectedTimeUnit: chartUnit,\n      maxTimeLength: label.length\n    })\n  }\n  handleTimeSelection = (timeSelection) => {\n    // set chart length from the time slection buttons\n    this.setChartLength(this.state.timeLabel, this.state.timeData, timeSelection)\n  }\n\n  calculateData = (data, series, price) => {\n\n    // change provided by the api is wrong so calculate our own with last closing price and current price\n    console.log(series)\n    let lastIndex = data.length;\n    let yesterday = lastIndex - 2\n    if(this.state.marketStatus && (series[lastIndex - 1].date) !== moment().format(\"YYYY-MM-DD\")) {\n      yesterday = lastIndex - 1\n    }\n    let previousClose = series[yesterday].close;\n    let change = (price - previousClose).toFixed(2);\n\n\n    // range provided by the api is out of date so calculate our own\n    let yearData = data.slice((data.length - 253));\n    let yearMax = Math.max(...yearData);\n    let yearMin = Math.min(...yearData);\n    \n    //save range and change to state \n    this.setState({\n      calcData: {\n        change: change,\n        range: yearMin + \" - \" + yearMax\n      }\n    });   \n  }\n\n  componentDidMount(){\n    // call the APIs on load\n    this.getProfile(this.state.ticker);\n    this.getPriceAndSeries(this.state.ticker);\n    this.getMarketStatus()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className={'topBar wrapper'}>\n            <h1><img src={require('./logo.svg')} alt=\"Stockup.ninja\" /></h1>\n            <SearchBarAuto handlerFromParent={this.handleData} />\n          </div>\n          <div className={'twoColumn wrapper'}>\n            <StockInfo \n              ticker={this.state.ticker}\n              change={this.state.calcData.change}\n              price={this.state.price}\n              profile={this.state.profile}\n              range={this.state.calcData.range}\n              mktCap={this.state.mktCap}\n              companyName={this.state.companyName}\n              />\n            <StockChart labels={this.state.selectedTimeLabel} data={this.state.selectedTimeData} handlerFromParent={this.handleTimeSelection} unit={this.state.selectedTimeUnit} max={this.state.maxTimeLength}/>\n          </div>\n        </header>\n        <main className='wrapper'>\n          <NewsFeed newsFeed={this.state.news} />\n        </main>\n        <footer>\n          <div className='wrapper footerContent'>\n            <p>Built with <FontAwesomeIcon icon={ faHeart }/> by <a href=\"https://michasiw.com\">Eugene Michasiw</a>.</p>\n            <p>Financial data provided by <a href=\"https://financialmodelingprep.com/\">Financial Modeling Prep</a>. News provided by <a href=\"https://newsapi.org/\">NewsAPI.org</a>.</p>\n          </div>\n        </footer>\n          \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}