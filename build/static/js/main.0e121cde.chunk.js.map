{"version":3,"sources":["logo.svg","StockInfo.js","StockChart.js","SearchBarAuto.js","Article.js","NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StockInfo","props","react_default","a","createElement","className","srcSet","profile","image","alt","companyName","ticker","price","description","range","beta","mktCap","exchange","sector","industry","StockChart","data","labels","this","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderWidth","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","es","options","scales","xAxes","type","time","unit","gridLines","color","zeroLineColor","ticks","fontColor","yAxes","legend","display","Component","SearchBarAuto","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getTickers","axios","method","url","dataResponse","then","response","validTickers","map","Ticker","setState","tickers","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","state","filter","stock","test","getSuggestionValue","suggestion","concat","renderSuggestion","_ref","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","part","index","highlight","key","text","onChange","event","_ref2","newValue","toUpperCase","onSuggestionsFetchRequested","_ref3","suggestions","onSuggestionsClearRequested","onSuggestionSelected","_ref4","suggestionValue","suggestionIndex","sectionIndex","preventDefault","substr","indexOf","handlerFromParant","onSubmit","e","includes","_this2","_this$state","inputProps","placeholder","dist_default","slice","focusInputOnSuggestionClick","Article","loadImages","urlToImage","src","title","href","NewsFeed","error","newsFeed","length","article","Article_Article","source","name","App","handleData","getProfile","getPrice","console","log","getNews","params","datatype","getTimeSeries","symbol","apiKey","sources","language","pageSize","q","encodeURI","articles","news","historical","timeData","timeLabel","forEach","item","push","close","date","calculateData","timeSeries","label","previousClose","change","toFixed","calcData","require","SearchBarAuto_SearchBarAuto","StockChart_StockChart","NewsFeed_NewsFeed","index_es","icon","faHeart","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e121cde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.78679e07.svg\";","import React from 'react'\n\nexport default function StockInfo(props) {\n  return (\n    <div className=\"stockInfo\">\n      <div className=\"mainInfo\">\n        <div className=\"imageBox\">\n          <img srcSet={props.profile.image} alt={props.companyName} />  \n        </div>\n        <div>\n          <h2>{props.companyName} </h2>\n          <p>({props.ticker}) {props.price}</p>\n        </div>\n      </div>\n      <div className=\"descriptionAndList\">\n        <p className=\"stockDescription\">{props.profile.description}</p>\n        <ul className=\"infoList\">\n          <li>\n            <span>52 Week Range</span>\n            <span>{props.profile.range}</span>\n          </li>\n          <li>\n            <span>Beta</span>\n            <span>{props.profile.beta}</span>\n          </li>\n          <li>\n            <span>Market Cap</span>\n            <span>{props.profile.mktCap}</span>\n          </li>\n          <li>\n            <span>Exchange</span>\n            <span>{props.profile.exchange}</span>\n          </li>\n          <li>\n            <span>Sector</span>\n            <span>{props.profile.sector}</span>\n          </li>\n          <li>\n            <span>Industry</span>\n            <span>{props.profile.industry}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport {Line} from 'react-chartjs-2';\n\nexport default class StockChart extends Component {\n  \n  render() {\n    const data = {\n      labels: this.props.labels,\n      datasets: [\n        {\n          labels: 'My First dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: '#fff',\n          borderColor: '#fff',\n          borderCapStyle: 'butt',\n          borderWidth: 1,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: '#fff',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 0,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: '#fff',\n          pointHoverBorderWidth: 2,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          data: this.props.data\n          \n        }\n      ]\n    };\n    const options = {\n      scales: {\n          xAxes: [{\n              type: 'time',\n              time: {\n                  unit: 'year'\n              },\n              gridLines: {\n                color: \"rgba(255, 255, 255, 0.2)\",\n                zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n              },\n              ticks: {\n                fontColor: \"rgba(255, 255, 255, 0.2)\",\n              }\n          }],\n          yAxes: [{\n            gridLines: {\n              color: \"rgba(255, 255, 255, 0.2)\",\n              zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n            },\n            ticks: {\n              fontColor: \"rgba(255, 255, 255, 0.2)\",\n            }\n          }]\n      },\n      legend: {\n        display: false\n      }\n      // responsive: true\n    }\n    \n    return (\n      <div className=\"stockChart\">\n        <Line data={data} options={options} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\n\n// const people = [\n//   {\n//     first: 'Charlie',\n//     last: 'Brown',\n//     twitter: 'dancounsell'\n//   },\n//   {\n//     first: 'Charlotte',\n//     last: 'White',\n//     twitter: 'mtnmissy'\n//   },\n//   {\n//     first: 'Chloe',\n//     last: 'Jones',\n//     twitter: 'ladylexy'\n//   },\n//   {\n//     first: 'Cooper',\n//     last: 'King',\n//     twitter: 'steveodom'\n//   }\n// ];\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\n\nexport default class SearchBarAuto extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      tickers: [],\n      validTickers: []\n    };    \n  }\n\n  getTickers = () => {\n    const url = 'https://financialmodelingprep.com/api/stock/list/all?datatype=json';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data\n      // console.log(response)\n      let validTickers = response.map((ticker) => {\n        return ticker.Ticker;\n      });\n\n      this.setState({\n        tickers: response,\n        validTickers: validTickers\n      })\n    })\n  }\n\n  componentDidMount(){\n    this.getTickers();\n  }\n\n  escapeRegexCharacters = (str) => {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  getSuggestions = (value) => {\n    const escapedValue = this.escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('\\\\b' + escapedValue, 'i');\n    \n    return this.state.tickers.filter(stock => regex.test(this.getSuggestionValue(stock)));\n  }\n  \n  getSuggestionValue = (suggestion) => {\n    return `${suggestion.Ticker} ${suggestion.companyName}`;\n  }\n  \n  renderSuggestion = (suggestion, { query }) => {\n    const suggestionText = `${suggestion.Ticker} | ${suggestion.companyName}`;\n    const matches = AutosuggestHighlightMatch(suggestionText, query);\n    const parts = AutosuggestHighlightParse(suggestionText, matches);\n  \n    return (\n      <span className={'suggestion-content '}>\n        <span className=\"suggestion\">\n          {\n            parts.map((part, index) => {\n              const className = part.highlight ? 'highlight' : null;\n  \n              return (\n                <span className={className} key={index}>{part.text}</span>\n              );\n            })\n          }\n        </span>\n      </span>\n    );\n  }\n\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue.toUpperCase()\n    });\n  };\n  \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) =>{\n    event.preventDefault();\n    const ticker = suggestionValue.substr(0,suggestionValue.indexOf(' '));\n    this.setState({\n      value: ticker,\n    })\n    this.props.handlerFromParant(ticker);\n  };\n  onSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.validTickers.includes(this.state.value)) {\n      this.props.handlerFromParant(this.state.value);\n    }\n    \n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Ticker: GOOG\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <form onSubmit={(e) => this.onSubmit(e)}>\n        <Autosuggest \n          suggestions={suggestions.slice(0, 5)}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          onSuggestionSelected={this.onSuggestionSelected}\n          inputProps={inputProps}\n          focusInputOnSuggestionClick={false} />\n      </form>\n    );\n  }\n}\n\n\n// // const languages = [\n// //   {\n// //     name: 'C',\n// //     year: 1972\n// //   },\n// //   {\n// //     name: 'Elm',\n// //     year: 2012\n// //   }\n// // ];\n\n// // Teach Autosuggest how to calculate suggestions for any given input value.\n// // const getSuggestions = value => {\n// //   const inputValue = value.trim().toLowerCase();\n// //   const inputLength = inputValue.length;\n\n// //   return inputLength === 0 ? [] : languages.filter(lang =>\n// //     lang.name.toLowerCase().slice(0, inputLength) === inputValue\n// //   );\n// // };\n\n// // // When suggestion is clicked, Autosuggest needs to populate the input\n// // // based on the clicked suggestion. Teach Autosuggest how to calculate the\n// // // input value for every given suggestion.\n// // const getSuggestionValue = suggestion => suggestion.name;\n\n// // // Use your imagination to render suggestions.\n// // const renderSuggestion = suggestion => (\n// //   <div>\n// //     {suggestion.name}\n// //   </div>\n// // );\n\n// export default class Example extends Component {\n//   constructor() {\n//     super();\n\n//     // Autosuggest is a controlled component.\n//     // This means that you need to provide an input value\n//     // and an onChange handler that updates this value (see below).\n//     // Suggestions also need to be provided to the Autosuggest,\n//     // and they are initially empty because the Autosuggest is closed.\n//     this.state = {\n//       value: '',\n//       suggestions: [],\n//       tickers: []\n//     };\n//   }\n//   getTickers = () => {\n//     const url = 'https://financialmodelingprep.com/api/stock/list/all?datatype=json';\n//     //make the api call to the museum\n//     axios({\n//       method: 'GET',\n//       url: url,\n//       dataResponse: 'json'\n//     }).then(response =>{\n//       response = response.data\n//       console.log(response)\n\n//       this.setState({\n//         tickers: response\n//       })\n//     })\n//   }\n\n//   getSuggestions = value => {\n//     const inputValue = value.trim().toUpperCase();\n//     const inputLength = inputValue.length;\n//     const tickers = this.state.tickers;\n  \n//     return inputLength === 0 ? [] : tickers.filter(arr =>\n//       arr.Ticker.toUpperCase().slice(0, inputLength) === inputValue\n//     );\n//   };\n  \n//   // When suggestion is clicked, Autosuggest needs to populate the input\n//   // based on the clicked suggestion. Teach Autosuggest how to calculate the\n//   // input value for every given suggestion.\n//   getSuggestionValue = suggestion => suggestion.Ticker;\n  \n//   // Use your imagination to render suggestions.\n//   renderSuggestion = suggestion => (\n//     <div>\n//       {suggestion.Ticker}\n//       {suggestion.companyName}\n//     </div>\n//   );\n\n//   onChange = (event, { newValue }) => {\n//     this.setState({\n//       value: newValue.toUpperCase()\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to update suggestions.\n//   // You already implemented this logic above, so just use it.\n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: this.getSuggestions(value)\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to clear suggestions.\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n//   componentDidMount(){\n//     this.getTickers();\n//   }\n\n//   render() {\n//     const { value, suggestions } = this.state;\n\n//     // Autosuggest will pass through all these props to the input.\n//     const inputProps = {\n//       placeholder: 'Type a programming language',\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     // Finally, render it!\n//     return (\n//       <Autosuggest\n//         suggestions={suggestions.slice(0, 5)}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={this.getSuggestionValue}\n//         renderSuggestion={this.renderSuggestion}\n//         inputProps={inputProps}\n//       />\n//     );\n//   }\n// }","import React, { Component } from 'react'\n\nexport default class Article extends Component {\n  \n  loadImages = () => {\n    if (this.props.urlToImage) {\n      return (\n        <div className=\"previewImage\">\n          <img src={this.props.urlToImage} alt={this.props.title} />\n        </div>\n      );\n    }}\n  render() {\n    return (\n      <div className=\"article\">\n        <a href={this.props.url}>\n          {this.loadImages()}\n          <h3>{this.props.title}</h3>\n          <p>{this.props.description}</p>\n        </a>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Article from './Article'\n\nexport default class NewsFeed extends Component {\n  render() {\n    let error = '';\n    if (!this.props.newsFeed.length) {\n      error = <p>No articles available at this time.</p>\n    }\n    return (\n      <div className=\"newsFeed\">\n        <h2>Recent News</h2>\n        {this.props.newsFeed.map((article, index) =>{\n          return (\n            <Article \n              key={index}\n              title={article.title}\n              url={article.url}\n              urlToImage={article.urlToImage}\n              source={article.source.name}\n              description={article.description} />\n              \n        )})}\n        {error}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss';\nimport axios from 'axios';\nimport StockInfo from './StockInfo';\nimport StockChart from './StockChart';\nimport SearchBarAuto from './SearchBarAuto';\nimport NewsFeed from './NewsFeed';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state={\n      ticker: 'GOOG',\n      profile: [],\n      price: 0,\n      timeSeries: [],\n      timeData: [],\n      timeLabel: [],\n      companyName: '',\n      news: [],\n      calcData: {}\n    }\n  }\n  handleData = (data) => {\n    this.setState({\n    ticker: data\n    })\n    this.getProfile(data);\n    this.getPrice(data);\n  }\n  getProfile = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/v3/company/profile/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.profile\n      console.log(response)\n      \n      let companyName = response.companyName\n      if(companyName.includes(' Inc')){\n        companyName = companyName.substr(0,companyName.indexOf(' Inc'));\n      } else if(companyName.includes(' Ltd')){\n        companyName = companyName.substr(0,companyName.indexOf(' Ltd'));\n      } else if(companyName.includes(' (The)')){\n        companyName = companyName.substr(0,companyName.indexOf(' (The)'));\n      }\n      \n      this.setState({\n        profile: response,\n        companyName: companyName\n      }, () =>{\n        this.getNews(this.state.companyName);\n      })\n    })\n  }\n  getPrice = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/company/real-time-price/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json',\n      params: {\n        datatype: 'json'\n      }\n    }).then(response =>{\n      this.getTimeSeries(response.data.symbol);\n      response = response.data.price\n      // console.log(response)\n\n      this.setState({\n        price: response\n      })\n    })\n  }\n  getNews = (name) => {\n    // const url = encodeURI('https://newsapi.org/v2/everything?apiKey=6b5dae4615c944b1aabc8497566543fa&sources=\"financial-post,cnbc,the-wall-street-journal,fortune,business-insider\"&language=en&q=' + name);\n    const url = 'https://newsapi.org/v2/everything';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url,\n      dataResponse: 'json',\n      params: {\n        apiKey: '6b5dae4615c944b1aabc8497566543fa',\n        sources: '\"financial-post,cnbc,the-wall-street-journal,fortune,business-insider\"',\n        language: 'en',\n        pageSize: 12,\n        q: encodeURI(name)\n      }\n    }).then(response =>{\n      response = response.data.articles\n      console.log(response)\n\n      this.setState({\n        news: response\n      })\n    })\n  }\n  getTimeSeries = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/v3/historical-price-full/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.historical\n      let timeData = [];\n      let timeLabel = [];\n      response.forEach((item) => {\n        timeData.push(item.close)\n        timeLabel.push(item.date)\n      })\n      this.calculateData(timeLabel, response)\n\n      this.setState({\n        timeSeries: response,\n        timeLabel: timeLabel,\n        timeData: timeData\n      })\n    })\n  }\n\n  calculateData = (label, data) => {\n    let lastIndex = label.length;\n    let previousClose = data[(lastIndex - 2)].close;\n    let change = (this.state.price - previousClose).toFixed(2);\n    this.setState({\n      calcData: {\n        change: change\n      }\n    });   \n  }\n  // componentDidUpdate(){\n  //   this.getProfile();\n  //   this.getTimeSeries();\n  // }\n  componentDidMount(){\n    this.getProfile(this.state.ticker);\n    \n    this.getPrice(this.state.ticker);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className={'topBar wrapper'}>\n            <h1><img src={require('./logo.svg')} alt=\"Stockup.ninja\" /></h1>\n            {/* <SearchBar handlerFromParant={this.handleData} /> */}\n            <SearchBarAuto handlerFromParant={this.handleData} />\n          </div>\n          <div className={'twoColumn wrapper'}>\n            <StockInfo \n              ticker={this.state.ticker}\n              price={this.state.price}\n              profile={this.state.profile}\n              companyName={this.state.companyName}\n              />\n            <StockChart labels={this.state.timeLabel} data={this.state.timeData} />\n          </div>\n        </header>\n        <main className='wrapper'>\n          <NewsFeed newsFeed={this.state.news} />\n        </main>\n        <footer><p className='wrapper'>Built with <FontAwesomeIcon icon={ faHeart }/> by Eugene Michasiw</p></footer>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}