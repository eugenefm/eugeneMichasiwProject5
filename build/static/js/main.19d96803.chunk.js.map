{"version":3,"sources":["logo.svg","StockInfo.js","StockChart.js","SearchBarAuto.js","Article.js","NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StockInfo","props","react_default","a","createElement","className","srcSet","profile","image","alt","companyName","ticker","price","change","index_es","icon","faChevronDown","faChevronUp","description","range","beta","mktCap","exchange","sector","industry","StockChart","_this","this","data","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderWidth","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","xAxes","type","time","unit","gridLines","color","zeroLineColor","ticks","fontColor","yAxes","legend","display","onClick","handlerFromParent","max","es","Component","SearchBarAuto","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getTickers","axios","method","url","dataResponse","then","response","validTickers","map","Ticker","setState","tickers","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","state","filter","stock","test","getSuggestionValue","suggestion","concat","renderSuggestion","_ref","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","part","index","highlight","key","text","onChange","event","_ref2","newValue","toUpperCase","onSuggestionsFetchRequested","_ref3","suggestions","onSuggestionsClearRequested","onSuggestionSelected","_ref4","suggestionValue","suggestionIndex","sectionIndex","preventDefault","substr","indexOf","onSubmit","e","includes","_this2","_this$state","inputProps","placeholder","dist_default","slice","focusInputOnSuggestionClick","Article","loadImages","urlToImage","newUrlToImage","src","title","href","source","date","NewsFeed","error","newsFeed","length","article","Article_Article","moment","publishedAt","format","name","App","handleData","getProfile","getPrice","getNews","params","datatype","getTimeSeries","symbol","console","log","apiKey","sources","language","pageSize","sortBy","q","encodeURI","articles","news","historical","timeData","timeLabel","forEach","item","push","close","calculateData","setChartLength","timeSeries","label","newLabel","newData","chartUnit","selectedTimeData","selectedTimeLabel","selectedTimeUnit","maxTimeLength","handleTimeSelection","timeSelection","previousClose","toFixed","calcData","require","SearchBarAuto_SearchBarAuto","StockChart_StockChart","NewsFeed_NewsFeed","faHeart","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19d96803.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.78679e07.svg\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\nexport default function StockInfo(props) {\n  \n  const change = () => {\n    if (props.change < 0) {\n      return <span className=\"change negative\">{props.change} <FontAwesomeIcon icon={ faChevronDown }/></span>;\n    } else if (props.change > 0) {\n      return <span className=\"change positive\">{props.change} <FontAwesomeIcon icon={ faChevronUp }/></span>;\n    } else {\n      return <span className=\"change\">{props.change}</span>;\n    }\n  }\n  return (\n    <div className=\"stockInfo\">\n      <div className=\"mainInfo\">\n        <div className=\"imageBox\">\n          <img srcSet={props.profile.image} alt={props.companyName} />  \n        </div>\n        <div>\n          <h2>{props.companyName} <span>({props.ticker})</span></h2>\n          <p>Price: {props.price}{change()}</p>\n        </div>\n      </div>\n      <div className=\"descriptionAndList\">\n        <p className=\"stockDescription\">{props.profile.description}</p>\n        <ul className=\"infoList\">\n          <li>\n            <span>52 Week Range</span>\n            <span>{props.profile.range}</span>\n          </li>\n          <li>\n            <span>Beta</span>\n            <span>{props.profile.beta}</span>\n          </li>\n          <li>\n            <span>Market Cap</span>\n            <span>{props.profile.mktCap}</span>\n          </li>\n          <li>\n            <span>Exchange</span>\n            <span>{props.profile.exchange}</span>\n          </li>\n          <li>\n            <span>Sector</span>\n            <span>{props.profile.sector}</span>\n          </li>\n          <li>\n            <span>Industry</span>\n            <span>{props.profile.industry}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport {Line} from 'react-chartjs-2';\n\nexport default class StockChart extends Component {\n  \n  render() {\n    const data = {\n      labels: this.props.labels,\n      datasets: [\n        {\n          labels: 'My First dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: '#fff',\n          borderColor: '#fff',\n          borderCapStyle: 'butt',\n          borderWidth: 1,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: '#fff',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 0,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: '#fff',\n          pointHoverBorderWidth: 2,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          data: this.props.data\n          \n        }\n      ]\n    };\n    const options = {\n      scales: {\n          xAxes: [{\n              type: 'time',\n              time: {\n                  unit: this.props.unit\n              },\n              gridLines: {\n                color: \"rgba(255, 255, 255, 0.2)\",\n                zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n              },\n              ticks: {\n                fontColor: \"rgba(255, 255, 255, 0.8)\",\n              }\n          }],\n          yAxes: [{\n            gridLines: {\n              color: \"rgba(255, 255, 255, 0.2)\",\n              zeroLineColor:\"rgba(255, 255, 255, 0.2)\"\n            },\n            ticks: {\n              fontColor: \"rgba(255, 255, 255, 0.8)\",\n            }\n          }]\n      },\n      legend: {\n        display: false\n      }\n      // responsive: true\n    }\n    \n    return (\n      <div className=\"stockChart\">\n        <h3>Historical Performance</h3>\n        <p>Scale: <button onClick={() => {this.props.handlerFromParent(22)}}>Month</button>\n        <button onClick={() => {this.props.handlerFromParent(253)}}>Year</button>\n        <button onClick={() => {this.props.handlerFromParent(this.props.max)}}>Five Year</button></p>\n        <Line data={data} options={options} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\n\n// const people = [\n//   {\n//     first: 'Charlie',\n//     last: 'Brown',\n//     twitter: 'dancounsell'\n//   },\n//   {\n//     first: 'Charlotte',\n//     last: 'White',\n//     twitter: 'mtnmissy'\n//   },\n//   {\n//     first: 'Chloe',\n//     last: 'Jones',\n//     twitter: 'ladylexy'\n//   },\n//   {\n//     first: 'Cooper',\n//     last: 'King',\n//     twitter: 'steveodom'\n//   }\n// ];\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\n\nexport default class SearchBarAuto extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      tickers: [],\n      validTickers: []\n    };    \n  }\n\n  getTickers = () => {\n    const url = 'https://financialmodelingprep.com/api/stock/list/all?datatype=json';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data\n      // console.log(response)\n      let validTickers = response.map((ticker) => {\n        return ticker.Ticker;\n      });\n\n      this.setState({\n        tickers: response,\n        validTickers: validTickers\n      })\n    })\n  }\n\n  componentDidMount(){\n    this.getTickers();\n  }\n\n  escapeRegexCharacters = (str) => {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  getSuggestions = (value) => {\n    const escapedValue = this.escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('\\\\b' + escapedValue, 'i');\n    \n    return this.state.tickers.filter(stock => regex.test(this.getSuggestionValue(stock)));\n  }\n  \n  getSuggestionValue = (suggestion) => {\n    return `${suggestion.Ticker} ${suggestion.companyName}`;\n  }\n  \n  renderSuggestion = (suggestion, { query }) => {\n    const suggestionText = `${suggestion.Ticker} | ${suggestion.companyName}`;\n    const matches = AutosuggestHighlightMatch(suggestionText, query);\n    const parts = AutosuggestHighlightParse(suggestionText, matches);\n  \n    return (\n      <span className={'suggestion-content '}>\n        <span className=\"suggestion\">\n          {\n            parts.map((part, index) => {\n              const className = part.highlight ? 'highlight' : null;\n  \n              return (\n                <span className={className} key={index}>{part.text}</span>\n              );\n            })\n          }\n        </span>\n      </span>\n    );\n  }\n\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue.toUpperCase()\n    });\n  };\n  \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) =>{\n    event.preventDefault();\n    const ticker = suggestionValue.substr(0,suggestionValue.indexOf(' '));\n    this.setState({\n      value: ticker,\n    })\n    this.props.handlerFromParent(ticker);\n  };\n  onSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.validTickers.includes(this.state.value)) {\n      this.props.handlerFromParent(this.state.value);\n    }\n    \n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Ticker: GOOG\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <form onSubmit={(e) => this.onSubmit(e)}>\n        <Autosuggest \n          suggestions={suggestions.slice(0, 5)}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          onSuggestionSelected={this.onSuggestionSelected}\n          inputProps={inputProps}\n          focusInputOnSuggestionClick={false} />\n      </form>\n    );\n  }\n}\n\n\n// // const languages = [\n// //   {\n// //     name: 'C',\n// //     year: 1972\n// //   },\n// //   {\n// //     name: 'Elm',\n// //     year: 2012\n// //   }\n// // ];\n\n// // Teach Autosuggest how to calculate suggestions for any given input value.\n// // const getSuggestions = value => {\n// //   const inputValue = value.trim().toLowerCase();\n// //   const inputLength = inputValue.length;\n\n// //   return inputLength === 0 ? [] : languages.filter(lang =>\n// //     lang.name.toLowerCase().slice(0, inputLength) === inputValue\n// //   );\n// // };\n\n// // // When suggestion is clicked, Autosuggest needs to populate the input\n// // // based on the clicked suggestion. Teach Autosuggest how to calculate the\n// // // input value for every given suggestion.\n// // const getSuggestionValue = suggestion => suggestion.name;\n\n// // // Use your imagination to render suggestions.\n// // const renderSuggestion = suggestion => (\n// //   <div>\n// //     {suggestion.name}\n// //   </div>\n// // );\n\n// export default class Example extends Component {\n//   constructor() {\n//     super();\n\n//     // Autosuggest is a controlled component.\n//     // This means that you need to provide an input value\n//     // and an onChange handler that updates this value (see below).\n//     // Suggestions also need to be provided to the Autosuggest,\n//     // and they are initially empty because the Autosuggest is closed.\n//     this.state = {\n//       value: '',\n//       suggestions: [],\n//       tickers: []\n//     };\n//   }\n//   getTickers = () => {\n//     const url = 'https://financialmodelingprep.com/api/stock/list/all?datatype=json';\n//     //make the api call to the museum\n//     axios({\n//       method: 'GET',\n//       url: url,\n//       dataResponse: 'json'\n//     }).then(response =>{\n//       response = response.data\n//       console.log(response)\n\n//       this.setState({\n//         tickers: response\n//       })\n//     })\n//   }\n\n//   getSuggestions = value => {\n//     const inputValue = value.trim().toUpperCase();\n//     const inputLength = inputValue.length;\n//     const tickers = this.state.tickers;\n  \n//     return inputLength === 0 ? [] : tickers.filter(arr =>\n//       arr.Ticker.toUpperCase().slice(0, inputLength) === inputValue\n//     );\n//   };\n  \n//   // When suggestion is clicked, Autosuggest needs to populate the input\n//   // based on the clicked suggestion. Teach Autosuggest how to calculate the\n//   // input value for every given suggestion.\n//   getSuggestionValue = suggestion => suggestion.Ticker;\n  \n//   // Use your imagination to render suggestions.\n//   renderSuggestion = suggestion => (\n//     <div>\n//       {suggestion.Ticker}\n//       {suggestion.companyName}\n//     </div>\n//   );\n\n//   onChange = (event, { newValue }) => {\n//     this.setState({\n//       value: newValue.toUpperCase()\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to update suggestions.\n//   // You already implemented this logic above, so just use it.\n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: this.getSuggestions(value)\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to clear suggestions.\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n//   componentDidMount(){\n//     this.getTickers();\n//   }\n\n//   render() {\n//     const { value, suggestions } = this.state;\n\n//     // Autosuggest will pass through all these props to the input.\n//     const inputProps = {\n//       placeholder: 'Type a programming language',\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     // Finally, render it!\n//     return (\n//       <Autosuggest\n//         suggestions={suggestions.slice(0, 5)}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={this.getSuggestionValue}\n//         renderSuggestion={this.renderSuggestion}\n//         inputProps={inputProps}\n//       />\n//     );\n//   }\n// }","import React, { Component } from 'react'\n\nexport default class Article extends Component {\n  // loads an image if its available\n  loadImages = () => {\n    if (this.props.urlToImage) {\n\n      // if the image is an http, rewrite the url as https to prevent mixed content errors.\n      let urlToImage = this.props.urlToImage;\n      let newUrlToImage = urlToImage;\n      if (urlToImage.includes('http:')) {\n      newUrlToImage = newUrlToImage.slice(0, 4) + \"s\" + newUrlToImage.slice(4);\n      }\n      return (\n        <div className=\"previewImage\">\n          <img src={newUrlToImage} alt={this.props.title} />\n        </div>\n      );\n    }}\n  render() {\n    return (\n      <div className=\"article\">\n        <a href={this.props.url}>\n          {this.loadImages()}\n        </a>\n        <p className=\"articleSource\">{this.props.source}</p>\n        <a href={this.props.url}>\n          <h3>{this.props.title}</h3>\n        </a> \n        <p><span className=\"articleDate\">{this.props.date}</span> {this.props.description}</p>\n        <a className=\"readMore\"href={this.props.url}>Read More</a> \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Article from './Article'\nimport moment from 'moment'\n\nexport default class NewsFeed extends Component {\n  render() {\n    // show a message if no articles are available\n    let error = '';\n    if (!this.props.newsFeed.length) {\n      error = <p>No articles available at this time.</p>\n    }\n    return (\n      <div className=\"newsFeed\">\n        <h2>Relevant News</h2>\n        {/* map through an array of articles to display them on the newsfeed */}\n        {this.props.newsFeed.map((article, index) =>{\n          return (\n            <Article \n              key={index}\n              title={article.title}\n              url={article.url}\n              urlToImage={article.urlToImage}\n              date={moment(article.publishedAt).format(\"MMM D, YYYY |\")}\n              source={article.source.name}\n              description={article.description} />\n              \n        )})}\n        {error}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss';\nimport axios from 'axios';\nimport StockInfo from './StockInfo';\nimport StockChart from './StockChart';\nimport SearchBarAuto from './SearchBarAuto';\nimport NewsFeed from './NewsFeed';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state={\n      ticker: 'GOOG',\n      profile: [],\n      price: 0,\n      timeSeries: [],\n      timeData: [],\n      timeLabel: [],\n      selectedTimeData: [],\n      selectedTimeLabel: [],\n      selectedTimeUnit: '',\n      maxTimeLength: 0,\n      companyName: '',\n      news: [],\n      calcData: {}\n    }\n  }\n  handleData = (data) => {\n    this.setState({\n    ticker: data\n    })\n    this.getProfile(data);\n    this.getPrice(data);\n  }\n  getProfile = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/v3/company/profile/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.profile\n      // console.log(response)\n      \n      let companyName = response.companyName\n      if(companyName.includes(' Inc')){\n        companyName = companyName.substr(0,companyName.indexOf(' Inc'));\n      } else if(companyName.includes(' Ltd')){\n        companyName = companyName.substr(0,companyName.indexOf(' Ltd'));\n      } else if(companyName.includes(' (The)')){\n        companyName = companyName.substr(0,companyName.indexOf(' (The)'));\n      }\n      \n      this.setState({\n        profile: response,\n        companyName: companyName\n      }, () =>{\n        this.getNews(this.state.companyName);\n      })\n    })\n  }\n  getPrice = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/company/real-time-price/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json',\n      params: {\n        datatype: 'json'\n      }\n    }).then(response =>{\n      this.getTimeSeries(response.data.symbol);\n      console.log(response)\n      response = response.data.price\n      \n\n      this.setState({\n        price: response\n      })\n    })\n  }\n  getNews = (name) => {\n    // const url = encodeURI('https://newsapi.org/v2/everything?apiKey=6b5dae4615c944b1aabc8497566543fa&sources=\"financial-post,cnbc,the-wall-street-journal,fortune,business-insider\"&language=en&q=' + name);\n    const url = 'https://newsapi.org/v2/everything';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url,\n      dataResponse: 'json',\n      params: {\n        apiKey: '6b5dae4615c944b1aabc8497566543fa',\n        sources: '\"financial-post,cnbc,the-wall-street-journal,fortune,business-insider\"',\n        language: 'en',\n        pageSize: 12,\n        sortBy: 'publishedAt',\n        q: encodeURI(name)\n      }\n    }).then(response =>{\n      response = response.data.articles\n      console.log(response)\n\n      this.setState({\n        news: response\n      })\n    })\n  }\n  getTimeSeries = (ticker) => {\n    const url = 'https://financialmodelingprep.com/api/v3/historical-price-full/';\n    //make the api call to the museum\n    axios({\n      method: 'GET',\n      url: url + ticker,\n      dataResponse: 'json'\n    }).then(response =>{\n      response = response.data.historical\n      let timeData = [];\n      let timeLabel = [];\n      response.forEach((item) => {\n        timeData.push(item.close)\n        timeLabel.push(item.date)\n      })\n      this.calculateData(timeLabel, response)\n      this.setChartLength(timeLabel, timeData, timeLabel.length)\n\n      this.setState({\n        timeSeries: response,\n        timeLabel: timeLabel,\n        timeData: timeData\n      })\n    })\n  }\n\n  setChartLength = (label, data, time) => {\n    const newLabel = label.slice((label.length - time));\n    const newData = data.slice((data.length - time));\n    let chartUnit = 'year';\n    if (time === 22) {\n      chartUnit = 'day'\n    } else if (time === 253) {\n      chartUnit = 'month'\n    }\n\n    this.setState({\n      selectedTimeData: newData,\n      selectedTimeLabel: newLabel,\n      selectedTimeUnit: chartUnit,\n      maxTimeLength: label.length\n    })\n  }\n  handleTimeSelection = (timeSelection) => {\n    this.setChartLength(this.state.timeLabel, this.state.timeData, timeSelection)\n  }\n\n  calculateData = (label, data) => {\n    let lastIndex = label.length;\n    let previousClose = data[(lastIndex - 2)].close;\n    let change = (this.state.price - previousClose).toFixed(2);\n    this.setState({\n      calcData: {\n        change: change\n      }\n    });   \n  }\n\n  componentDidMount(){\n    this.getProfile(this.state.ticker);\n    this.getPrice(this.state.ticker);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className={'topBar wrapper'}>\n            <h1><img src={require('./logo.svg')} alt=\"Stockup.ninja\" /></h1>\n            <SearchBarAuto handlerFromParent={this.handleData} />\n          </div>\n          <div className={'twoColumn wrapper'}>\n            <StockInfo \n              ticker={this.state.ticker}\n              change={this.state.calcData.change}\n              price={this.state.price}\n              profile={this.state.profile}\n              companyName={this.state.companyName}\n              />\n            <StockChart labels={this.state.selectedTimeLabel} data={this.state.selectedTimeData} handlerFromParent={this.handleTimeSelection} unit={this.state.selectedTimeUnit} max={this.state.maxTimeLength}/>\n          </div>\n        </header>\n        <main className='wrapper'>\n          <NewsFeed newsFeed={this.state.news} />\n        </main>\n        <footer><p className='wrapper'>Built with <FontAwesomeIcon icon={ faHeart }/> by Eugene Michasiw</p></footer>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}